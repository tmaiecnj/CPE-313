{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/tmaiecnj/CPE-313/blob/main/Hands-on%20Activity%206.1%20-%20Recurrent%20Neural%20Networks\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Github Link: [Hands-on Activity 6.1: Recurrent Neural Networks]()"
      ],
      "metadata": {
        "id": "vHbv9crvMcbs"
      },
      "id": "vHbv9crvMcbs"
    },
    {
      "cell_type": "markdown",
      "id": "fourth-lesbian",
      "metadata": {
        "id": "fourth-lesbian"
      },
      "source": [
        "# Activity 3.1 - Recurrent Neural Networks"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "historical-import",
      "metadata": {
        "id": "historical-import"
      },
      "source": [
        "## Objective(s):\n",
        "\n",
        "This activity aims to introduce how to build a recurrent neural network"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "related-karma",
      "metadata": {
        "id": "related-karma"
      },
      "source": [
        "## Intended Learning Outcomes (ILOs):\n",
        "* Demonstrate how to build and train neural recurrent neural network\n",
        "* Evaluate the score and accuracy of the recurrent neural network"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fossil-thermal",
      "metadata": {
        "id": "fossil-thermal"
      },
      "source": [
        "## Resources:\n",
        "* Jupyter Notebook\n",
        "* IMDB"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "australian-marketing",
      "metadata": {
        "id": "australian-marketing"
      },
      "source": [
        "## Procedures\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Load the necessary libraries"
      ],
      "metadata": {
        "id": "mzL4kPTi7k3V"
      },
      "id": "mzL4kPTi7k3V"
    },
    {
      "cell_type": "code",
      "execution_count": 79,
      "id": "based-growing",
      "metadata": {
        "id": "based-growing"
      },
      "outputs": [],
      "source": [
        "from __future__ import print_function\n",
        "import keras\n",
        "from keras.preprocessing import sequence\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, Embedding\n",
        "from keras.layers import SimpleRNN\n",
        "from keras.datasets import imdb\n",
        "from keras import initializers\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "romance-object",
      "metadata": {
        "id": "romance-object"
      },
      "source": [
        "* Set the max_features to 20000\n",
        "* Set the maximum length of a sequence\n",
        "* Use the batch size of 32"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 80,
      "id": "pending-finance",
      "metadata": {
        "id": "pending-finance"
      },
      "outputs": [],
      "source": [
        "max_features = 20000\n",
        "maxlen = 30\n",
        "batch_size = 32"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "juvenile-defensive",
      "metadata": {
        "id": "juvenile-defensive"
      },
      "source": [
        "Load the data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 81,
      "id": "familiar-escape",
      "metadata": {
        "id": "familiar-escape",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "884723df-abca-4ee4-cbe6-53af234a644f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "25000 train sequences\n",
            "25000 test sequences\n"
          ]
        }
      ],
      "source": [
        "(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)\n",
        "print(len(x_train), 'train sequences')\n",
        "print(len(x_test), 'test sequences')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "hairy-volleyball",
      "metadata": {
        "id": "hairy-volleyball"
      },
      "source": [
        " Truncates the sequences so that they are of the maximum length"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 82,
      "id": "distant-praise",
      "metadata": {
        "id": "distant-praise",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9295677a-876e-4c51-a53e-26a140484810"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x_train shape: (25000, 30)\n",
            "x_test shape: (25000, 30)\n"
          ]
        }
      ],
      "source": [
        "x_train = sequence.pad_sequences(x_train, maxlen=maxlen)\n",
        "x_test = sequence.pad_sequences(x_test, maxlen=maxlen)\n",
        "print('x_train shape:', x_train.shape)\n",
        "print('x_test shape:', x_test.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Check the example of sequence"
      ],
      "metadata": {
        "id": "FWyR031l65j8"
      },
      "id": "FWyR031l65j8"
    },
    {
      "cell_type": "code",
      "execution_count": 83,
      "id": "surprising-bacteria",
      "metadata": {
        "id": "surprising-bacteria",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6beea2e5-e1d4-4d0d-ffd4-e956cf166ab9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([  219,   141,    35,   221,   956,    54,    13,    16,    11,\n",
              "        2714,    61,   322,   423,    12,    38,    76,    59,  1803,\n",
              "          72,     8, 10508,    23,     5,   967,    12,    38,    85,\n",
              "          62,   358,    99], dtype=int32)"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ],
      "source": [
        "x_train[123,:]"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "quantitative-breath",
      "metadata": {
        "id": "quantitative-breath"
      },
      "source": [
        "Build a recurrent neural network"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 84,
      "id": "closed-writer",
      "metadata": {
        "id": "closed-writer"
      },
      "outputs": [],
      "source": [
        "rnn_hidden_dim = 5\n",
        "word_embedding_dim = 50\n",
        "model_rnn = Sequential()\n",
        "model_rnn.add(Embedding(max_features, word_embedding_dim))  #This layer takes each integer in the sequence and embeds it in a 50-dimensional vector\n",
        "model_rnn.add(SimpleRNN(rnn_hidden_dim,\n",
        "                    kernel_initializer=initializers.RandomNormal(stddev=0.001),\n",
        "                    recurrent_initializer=initializers.Identity(gain=1.0),\n",
        "                    activation='relu',\n",
        "                    input_shape=x_train.shape[1:]))\n",
        "\n",
        "model_rnn.add(Dense(1, activation='sigmoid'))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 85,
      "id": "developmental-foster",
      "metadata": {
        "id": "developmental-foster"
      },
      "outputs": [],
      "source": [
        "rmsprop = keras.optimizers.RMSprop(learning_rate = .0001)\n",
        "\n",
        "model_rnn.compile(loss='binary_crossentropy',\n",
        "              optimizer=rmsprop,\n",
        "              metrics=['accuracy'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 86,
      "id": "joined-athletics",
      "metadata": {
        "id": "joined-athletics",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b5e071d0-a9fd-4f0d-9d95-05a2c9780975"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "782/782 [==============================] - 12s 14ms/step - loss: 0.6898 - accuracy: 0.5444 - val_loss: 0.6757 - val_accuracy: 0.6014\n",
            "Epoch 2/10\n",
            "782/782 [==============================] - 10s 13ms/step - loss: 0.6357 - accuracy: 0.6537 - val_loss: 0.6103 - val_accuracy: 0.6663\n",
            "Epoch 3/10\n",
            "782/782 [==============================] - 9s 12ms/step - loss: 0.5639 - accuracy: 0.7114 - val_loss: 0.5557 - val_accuracy: 0.7122\n",
            "Epoch 4/10\n",
            "782/782 [==============================] - 9s 11ms/step - loss: 0.5118 - accuracy: 0.7496 - val_loss: 0.5250 - val_accuracy: 0.7326\n",
            "Epoch 5/10\n",
            "782/782 [==============================] - 11s 14ms/step - loss: 0.4737 - accuracy: 0.7752 - val_loss: 0.5051 - val_accuracy: 0.7455\n",
            "Epoch 6/10\n",
            "782/782 [==============================] - 10s 12ms/step - loss: 0.4459 - accuracy: 0.7937 - val_loss: 0.4891 - val_accuracy: 0.7583\n",
            "Epoch 7/10\n",
            "782/782 [==============================] - 9s 12ms/step - loss: 0.4241 - accuracy: 0.8062 - val_loss: 0.4796 - val_accuracy: 0.7643\n",
            "Epoch 8/10\n",
            "782/782 [==============================] - 10s 13ms/step - loss: 0.4069 - accuracy: 0.8151 - val_loss: 0.4686 - val_accuracy: 0.7710\n",
            "Epoch 9/10\n",
            "782/782 [==============================] - 10s 12ms/step - loss: 0.3933 - accuracy: 0.8235 - val_loss: 0.4627 - val_accuracy: 0.7756\n",
            "Epoch 10/10\n",
            "782/782 [==============================] - 9s 12ms/step - loss: 0.3823 - accuracy: 0.8311 - val_loss: 0.4615 - val_accuracy: 0.7758\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.History at 0x7e9e6a547460>"
            ]
          },
          "metadata": {},
          "execution_count": 86
        }
      ],
      "source": [
        "model_rnn.fit(x_train, y_train,\n",
        "          batch_size=batch_size,\n",
        "          epochs=10,\n",
        "          validation_data=(x_test, y_test))"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "freelance-proposal",
      "metadata": {
        "id": "freelance-proposal"
      },
      "source": [
        "Evaluate the model using the test set."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 87,
      "id": "early-connecticut",
      "metadata": {
        "id": "early-connecticut",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "67239a87-1839-45d9-aa1f-5282aadc2d86"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "782/782 [==============================] - 2s 3ms/step - loss: 0.4615 - accuracy: 0.7758\n",
            "Test score: 0.4614667594432831\n",
            "Test accuracy: 0.7757999897003174\n"
          ]
        }
      ],
      "source": [
        "score, acc = model_rnn.evaluate(x_test, y_test,\n",
        "                            batch_size=batch_size)\n",
        "print('Test score:', score)\n",
        "print('Test accuracy:', acc)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "miniature-generic",
      "metadata": {
        "id": "miniature-generic"
      },
      "source": [
        "Interpret the result"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Wrap the code into function\n",
        "\n",
        "def train_rnn_model(max_features,\n",
        "                    maxlen,\n",
        "                    word_embedding_dim,\n",
        "                    rnn_hidden_dim,\n",
        "                    batch_size, epochs,\n",
        "                    learning_rate):\n",
        "\n",
        "  # Load IMDB dataset\n",
        "  (x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)\n",
        "  print('Train sequences:', len(x_train))\n",
        "  print('Test sequences:', len(x_test))\n",
        "\n",
        "  # Pad Sequences\n",
        "  x_train = sequence.pad_sequences(x_train, maxlen=maxlen)\n",
        "  x_test = sequence.pad_sequences(x_test, maxlen=maxlen)\n",
        "  print('\\nx_train shape:', x_train.shape)\n",
        "  print('x_test shape:', x_test.shape)\n",
        "  print('\\n')\n",
        "\n",
        "  # Define Model\n",
        "  model_rnn = Sequential()\n",
        "  model_rnn.add(Embedding(max_features, word_embedding_dim))\n",
        "  model_rnn.add(SimpleRNN(rnn_hidden_dim,\n",
        "                          kernel_initializer=initializers.RandomNormal(stddev=0.001),\n",
        "                          recurrent_initializer=initializers.Identity(gain=1.0),\n",
        "                          activation='relu',\n",
        "                          input_shape=x_train.shape[1:]))\n",
        "  model_rnn.add(Dense(1, activation='sigmoid'))\n",
        "\n",
        "  # Compile\n",
        "  rmsprop = keras.optimizers.RMSprop(learning_rate = learning_rate)\n",
        "\n",
        "  model_rnn.compile(loss='binary_crossentropy',\n",
        "                    optimizer=rmsprop,\n",
        "                    metrics=['accuracy'])\n",
        "\n",
        "  # Train\n",
        "  model_rnn.fit(x_train, y_train,\n",
        "                batch_size=batch_size,\n",
        "                epochs=epochs,\n",
        "                validation_data=(x_test, y_test))\n",
        "  print('\\n')\n",
        "\n",
        "  # Evaluate\n",
        "  score, acc = model_rnn.evaluate(x_test, y_test,\n",
        "                            batch_size=batch_size)\n",
        "  print('\\n\\nTest score:', score)\n",
        "  print('Test accuracy:', acc)"
      ],
      "metadata": {
        "id": "Xh88VvLCGfTy"
      },
      "id": "Xh88VvLCGfTy",
      "execution_count": 88,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "id": "planned-detection",
      "metadata": {
        "id": "planned-detection"
      },
      "source": [
        "## Supplementary Activity"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "industrial-frequency",
      "metadata": {
        "id": "industrial-frequency"
      },
      "source": [
        "- Prepare the data to use sequences of length 80 rather than length 30.  Did it improve the performance?\n",
        "- Try different values of the \"max_features\".  Can you improve the performance?\n",
        "- Try smaller and larger sizes of the RNN hidden dimension.  How does it affect the model performance?  How does it affect the run time?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 89,
      "id": "important-delight",
      "metadata": {
        "id": "important-delight",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7c142063-88a9-4865-daa4-fbc6d01a54f6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train sequences: 25000\n",
            "Test sequences: 25000\n",
            "\n",
            "x_train shape: (25000, 80)\n",
            "x_test shape: (25000, 80)\n",
            "\n",
            "\n",
            "Epoch 1/10\n",
            "782/782 [==============================] - 19s 22ms/step - loss: 0.6400 - accuracy: 0.6371 - val_loss: 0.5682 - val_accuracy: 0.7190\n",
            "Epoch 2/10\n",
            "782/782 [==============================] - 18s 24ms/step - loss: 0.4931 - accuracy: 0.7689 - val_loss: 0.4755 - val_accuracy: 0.7676\n",
            "Epoch 3/10\n",
            "782/782 [==============================] - 18s 23ms/step - loss: 0.4164 - accuracy: 0.8143 - val_loss: 0.4385 - val_accuracy: 0.7926\n",
            "Epoch 4/10\n",
            "782/782 [==============================] - 18s 22ms/step - loss: 0.3712 - accuracy: 0.8390 - val_loss: 0.4460 - val_accuracy: 0.7835\n",
            "Epoch 5/10\n",
            "782/782 [==============================] - 19s 24ms/step - loss: 0.3421 - accuracy: 0.8556 - val_loss: 0.4180 - val_accuracy: 0.8025\n",
            "Epoch 6/10\n",
            "782/782 [==============================] - 17s 22ms/step - loss: 0.3190 - accuracy: 0.8656 - val_loss: 0.4108 - val_accuracy: 0.8205\n",
            "Epoch 7/10\n",
            "782/782 [==============================] - 18s 22ms/step - loss: 0.3016 - accuracy: 0.8760 - val_loss: 0.3826 - val_accuracy: 0.8275\n",
            "Epoch 8/10\n",
            "782/782 [==============================] - 19s 24ms/step - loss: 0.2871 - accuracy: 0.8820 - val_loss: 0.4041 - val_accuracy: 0.8169\n",
            "Epoch 9/10\n",
            "782/782 [==============================] - 18s 23ms/step - loss: 0.2737 - accuracy: 0.8880 - val_loss: 0.4064 - val_accuracy: 0.8189\n",
            "Epoch 10/10\n",
            "782/782 [==============================] - 18s 22ms/step - loss: 0.2635 - accuracy: 0.8940 - val_loss: 0.3771 - val_accuracy: 0.8350\n",
            "\n",
            "\n",
            "782/782 [==============================] - 4s 6ms/step - loss: 0.3771 - accuracy: 0.8350\n",
            "\n",
            "\n",
            "Test score: 0.3770516514778137\n",
            "Test accuracy: 0.8349999785423279\n"
          ]
        }
      ],
      "source": [
        "# Prepare the data to use sequences of length 80 rather than length 30\n",
        "\n",
        "train_rnn_model(max_features=20000,\n",
        "                maxlen=80, #Use sequence length 80\n",
        "                word_embedding_dim=50,\n",
        "                rnn_hidden_dim=5,\n",
        "                batch_size=32,\n",
        "                epochs=10,\n",
        "                learning_rate=.0001,)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Did it improve the performance?\n",
        "\n",
        "*Answer:*"
      ],
      "metadata": {
        "id": "6mdnupDr_kU3"
      },
      "id": "6mdnupDr_kU3"
    },
    {
      "cell_type": "code",
      "source": [
        "# Try different values of the max_features\n",
        "\n",
        "train_rnn_model(max_features=10000, # Different value of max_features (Lower)\n",
        "                maxlen=30,\n",
        "                word_embedding_dim=50,\n",
        "                rnn_hidden_dim=5,\n",
        "                batch_size=32,\n",
        "                epochs=10,\n",
        "                learning_rate=.0001,)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "usavJ9eaBqD6",
        "outputId": "4e124f81-b922-457f-eb5b-135711670b85"
      },
      "id": "usavJ9eaBqD6",
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train sequences: 25000\n",
            "Test sequences: 25000\n",
            "\n",
            "x_train shape: (25000, 80)\n",
            "x_test shape: (25000, 80)\n",
            "\n",
            "\n",
            "Epoch 1/10\n",
            "782/782 [==============================] - 18s 21ms/step - loss: 0.6182 - accuracy: 0.6485 - val_loss: 0.5395 - val_accuracy: 0.7191\n",
            "Epoch 2/10\n",
            "782/782 [==============================] - 17s 22ms/step - loss: 0.4643 - accuracy: 0.7805 - val_loss: 0.4630 - val_accuracy: 0.7845\n",
            "Epoch 3/10\n",
            "782/782 [==============================] - 16s 21ms/step - loss: 0.3944 - accuracy: 0.8224 - val_loss: 0.4139 - val_accuracy: 0.8066\n",
            "Epoch 4/10\n",
            "782/782 [==============================] - 16s 21ms/step - loss: 0.3555 - accuracy: 0.8458 - val_loss: 0.3939 - val_accuracy: 0.8188\n",
            "Epoch 5/10\n",
            "782/782 [==============================] - 16s 21ms/step - loss: 0.3317 - accuracy: 0.8587 - val_loss: 0.3898 - val_accuracy: 0.8224\n",
            "Epoch 6/10\n",
            "782/782 [==============================] - 17s 21ms/step - loss: 0.3133 - accuracy: 0.8690 - val_loss: 0.3781 - val_accuracy: 0.8300\n",
            "Epoch 7/10\n",
            "782/782 [==============================] - 16s 21ms/step - loss: 0.2994 - accuracy: 0.8757 - val_loss: 0.3881 - val_accuracy: 0.8254\n",
            "Epoch 8/10\n",
            "782/782 [==============================] - 18s 22ms/step - loss: 0.2872 - accuracy: 0.8820 - val_loss: 0.3904 - val_accuracy: 0.8252\n",
            "Epoch 9/10\n",
            "782/782 [==============================] - 16s 21ms/step - loss: 0.2776 - accuracy: 0.8861 - val_loss: 0.3663 - val_accuracy: 0.8372\n",
            "Epoch 10/10\n",
            "782/782 [==============================] - 18s 24ms/step - loss: 0.2693 - accuracy: 0.8896 - val_loss: 0.3643 - val_accuracy: 0.8390\n",
            "\n",
            "\n",
            "782/782 [==============================] - 3s 4ms/step - loss: 0.3643 - accuracy: 0.8390\n",
            "\n",
            "\n",
            "Test score: 0.36433979868888855\n",
            "Test accuracy: 0.8389599919319153\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_rnn_model(max_features=50000, # Different value of max_features (Higher)\n",
        "                maxlen=80, # Use sequence length 80\n",
        "                word_embedding_dim=50,\n",
        "                rnn_hidden_dim=5,\n",
        "                batch_size=32,\n",
        "                epochs=10,\n",
        "                learning_rate=.0001,)"
      ],
      "metadata": {
        "id": "bD3YoUVaKpiE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9c622336-fa7b-488a-fe00-676316a7c552"
      },
      "id": "bD3YoUVaKpiE",
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train sequences: 25000\n",
            "Test sequences: 25000\n",
            "\n",
            "x_train shape: (25000, 80)\n",
            "x_test shape: (25000, 80)\n",
            "\n",
            "\n",
            "Epoch 1/10\n",
            "782/782 [==============================] - 27s 33ms/step - loss: 0.6274 - accuracy: 0.6392 - val_loss: 0.5394 - val_accuracy: 0.7315\n",
            "Epoch 2/10\n",
            "782/782 [==============================] - 26s 33ms/step - loss: 0.4762 - accuracy: 0.7727 - val_loss: 0.4995 - val_accuracy: 0.7646\n",
            "Epoch 3/10\n",
            "782/782 [==============================] - 26s 33ms/step - loss: 0.3989 - accuracy: 0.8212 - val_loss: 0.4271 - val_accuracy: 0.8006\n",
            "Epoch 4/10\n",
            "782/782 [==============================] - 26s 33ms/step - loss: 0.3533 - accuracy: 0.8496 - val_loss: 0.4058 - val_accuracy: 0.8136\n",
            "Epoch 5/10\n",
            "782/782 [==============================] - 26s 33ms/step - loss: 0.3227 - accuracy: 0.8639 - val_loss: 0.3948 - val_accuracy: 0.8228\n",
            "Epoch 6/10\n",
            "782/782 [==============================] - 26s 33ms/step - loss: 0.3008 - accuracy: 0.8756 - val_loss: 0.3895 - val_accuracy: 0.8254\n",
            "Epoch 7/10\n",
            "782/782 [==============================] - 26s 33ms/step - loss: 0.2826 - accuracy: 0.8838 - val_loss: 0.3937 - val_accuracy: 0.8241\n",
            "Epoch 8/10\n",
            "782/782 [==============================] - 34s 43ms/step - loss: 0.2676 - accuracy: 0.8909 - val_loss: 0.3815 - val_accuracy: 0.8296\n",
            "Epoch 9/10\n",
            "782/782 [==============================] - 26s 33ms/step - loss: 0.2551 - accuracy: 0.8972 - val_loss: 0.3915 - val_accuracy: 0.8294\n",
            "Epoch 10/10\n",
            "782/782 [==============================] - 25s 33ms/step - loss: 0.2438 - accuracy: 0.9027 - val_loss: 0.4353 - val_accuracy: 0.8195\n",
            "\n",
            "\n",
            "782/782 [==============================] - 3s 4ms/step - loss: 0.4353 - accuracy: 0.8195\n",
            "\n",
            "\n",
            "Test score: 0.4352884888648987\n",
            "Test accuracy: 0.8194800019264221\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Can you improve the performance?\n",
        "\n",
        "*Answer*"
      ],
      "metadata": {
        "id": "eFpyf8TnBw8d"
      },
      "id": "eFpyf8TnBw8d"
    },
    {
      "cell_type": "code",
      "source": [
        "# Try smaller and larger sized of RNN hidden dimension.\n",
        "\n",
        "train_rnn_model(max_features=20000,\n",
        "                maxlen=30,\n",
        "                word_embedding_dim=50,\n",
        "                rnn_hidden_dim=3, # Smaller size of RNN hidden dimension\n",
        "                batch_size=32,\n",
        "                epochs=10,\n",
        "                learning_rate=.0001,)"
      ],
      "metadata": {
        "id": "EshVGC8kB1b-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "03157bca-2856-48b1-ed0d-e87717f7eacb"
      },
      "id": "EshVGC8kB1b-",
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train sequences: 25000\n",
            "Test sequences: 25000\n",
            "\n",
            "x_train shape: (25000, 30)\n",
            "x_test shape: (25000, 30)\n",
            "\n",
            "\n",
            "Epoch 1/10\n",
            "782/782 [==============================] - 10s 11ms/step - loss: 0.6856 - accuracy: 0.5172 - val_loss: 0.6654 - val_accuracy: 0.5589\n",
            "Epoch 2/10\n",
            "782/782 [==============================] - 9s 12ms/step - loss: 0.6397 - accuracy: 0.6454 - val_loss: 0.6248 - val_accuracy: 0.6944\n",
            "Epoch 3/10\n",
            "782/782 [==============================] - 10s 13ms/step - loss: 0.6053 - accuracy: 0.7242 - val_loss: 0.6036 - val_accuracy: 0.7346\n",
            "Epoch 4/10\n",
            "782/782 [==============================] - 9s 12ms/step - loss: 0.5821 - accuracy: 0.7505 - val_loss: 0.5882 - val_accuracy: 0.7482\n",
            "Epoch 5/10\n",
            "782/782 [==============================] - 8s 11ms/step - loss: 0.5626 - accuracy: 0.7653 - val_loss: 0.5749 - val_accuracy: 0.7502\n",
            "Epoch 6/10\n",
            "782/782 [==============================] - 10s 12ms/step - loss: 0.5462 - accuracy: 0.7802 - val_loss: 0.5642 - val_accuracy: 0.7521\n",
            "Epoch 7/10\n",
            "782/782 [==============================] - 9s 12ms/step - loss: 0.5319 - accuracy: 0.7891 - val_loss: 0.5585 - val_accuracy: 0.7488\n",
            "Epoch 8/10\n",
            "782/782 [==============================] - 9s 12ms/step - loss: 0.5180 - accuracy: 0.7961 - val_loss: 0.5448 - val_accuracy: 0.7610\n",
            "Epoch 9/10\n",
            "782/782 [==============================] - 10s 12ms/step - loss: 0.5065 - accuracy: 0.8032 - val_loss: 0.5352 - val_accuracy: 0.7659\n",
            "Epoch 10/10\n",
            "782/782 [==============================] - 10s 12ms/step - loss: 0.4956 - accuracy: 0.8076 - val_loss: 0.5293 - val_accuracy: 0.7675\n",
            "\n",
            "\n",
            "782/782 [==============================] - 2s 2ms/step - loss: 0.5293 - accuracy: 0.7675\n",
            "\n",
            "\n",
            "Test score: 0.5293461084365845\n",
            "Test accuracy: 0.7674800157546997\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_rnn_model(max_features=20000,\n",
        "                maxlen=30,\n",
        "                word_embedding_dim=50,\n",
        "                rnn_hidden_dim=15, # Larger size of RNN hidden dimension\n",
        "                batch_size=32,\n",
        "                epochs=10,\n",
        "                learning_rate=.0001,)"
      ],
      "metadata": {
        "id": "71CBbXJjB9o-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a9504bf7-28f3-48bb-9b36-b090973f41a2"
      },
      "id": "71CBbXJjB9o-",
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train sequences: 25000\n",
            "Test sequences: 25000\n",
            "\n",
            "x_train shape: (25000, 30)\n",
            "x_test shape: (25000, 30)\n",
            "\n",
            "\n",
            "Epoch 1/10\n",
            "782/782 [==============================] - 10s 11ms/step - loss: 0.6647 - accuracy: 0.5969 - val_loss: 0.6196 - val_accuracy: 0.6620\n",
            "Epoch 2/10\n",
            "782/782 [==============================] - 10s 12ms/step - loss: 0.5699 - accuracy: 0.7022 - val_loss: 0.5472 - val_accuracy: 0.7189\n",
            "Epoch 3/10\n",
            "782/782 [==============================] - 9s 12ms/step - loss: 0.5005 - accuracy: 0.7574 - val_loss: 0.5126 - val_accuracy: 0.7457\n",
            "Epoch 4/10\n",
            "782/782 [==============================] - 8s 11ms/step - loss: 0.4553 - accuracy: 0.7868 - val_loss: 0.4840 - val_accuracy: 0.7640\n",
            "Epoch 5/10\n",
            "782/782 [==============================] - 10s 12ms/step - loss: 0.4244 - accuracy: 0.8057 - val_loss: 0.4698 - val_accuracy: 0.7719\n",
            "Epoch 6/10\n",
            "782/782 [==============================] - 10s 13ms/step - loss: 0.4028 - accuracy: 0.8187 - val_loss: 0.4589 - val_accuracy: 0.7800\n",
            "Epoch 7/10\n",
            "782/782 [==============================] - 8s 11ms/step - loss: 0.3877 - accuracy: 0.8258 - val_loss: 0.4578 - val_accuracy: 0.7827\n",
            "Epoch 8/10\n",
            "782/782 [==============================] - 10s 12ms/step - loss: 0.3755 - accuracy: 0.8340 - val_loss: 0.4499 - val_accuracy: 0.7873\n",
            "Epoch 9/10\n",
            "782/782 [==============================] - 10s 12ms/step - loss: 0.3652 - accuracy: 0.8383 - val_loss: 0.4542 - val_accuracy: 0.7865\n",
            "Epoch 10/10\n",
            "782/782 [==============================] - 9s 11ms/step - loss: 0.3577 - accuracy: 0.8410 - val_loss: 0.4533 - val_accuracy: 0.7880\n",
            "\n",
            "\n",
            "782/782 [==============================] - 2s 3ms/step - loss: 0.4533 - accuracy: 0.7880\n",
            "\n",
            "\n",
            "Test score: 0.4533136785030365\n",
            "Test accuracy: 0.7880399823188782\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "How does it affect the model performance? How does it affect the run time?\n",
        "\n",
        "*Answer*"
      ],
      "metadata": {
        "id": "byiJcq6_B-iP"
      },
      "id": "byiJcq6_B-iP"
    },
    {
      "cell_type": "markdown",
      "id": "signal-federal",
      "metadata": {
        "id": "signal-federal"
      },
      "source": [
        "## Conclusion\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Conclusion*"
      ],
      "metadata": {
        "id": "IF6wSE4IMXGV"
      },
      "id": "IF6wSE4IMXGV"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.10"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}